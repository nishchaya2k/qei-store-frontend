{"ast":null,"code":"var _jsxFileName = \"/Users/nishchayanarula/Desktop/simple-one/client/src/utils/context.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\n// Create a Context object.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\n\n// Create a Provider component.\nconst AppContext = ({\n  children\n}) => {\n  _s();\n  const [categories, setCategories] = useState();\n  const [products, setProducts] = useState();\n  const [showCart, setShowCart] = useState(false);\n  const [cartItems, setCartItems] = useState([]); //cartItems is an array contain all the products\n  const [cartCount, setCartCount] = useState(0);\n  const [cartSubTotal, setCartSubTotal] = useState(0);\n  const location = useLocation();\n\n  //we will pass all the states which we want them to be available globally for the all components\n  //we will write them in values     \n\n  const handleAddToCart = (product, quantity) => {\n    var _items;\n    let items = [...cartItems]; //shallow copy of cartItems\n    let index = (_items = items) === null || _items === void 0 ? void 0 : _items.findIndex(p => p.id === (product === null || product === void 0 ? void 0 : product.id)); //find if the current selected item index is in the items or in the cartItems or not\n    if (index !== -1) {\n      items[index].attributes.quantity += quantity; //if yes, item already present, increase its quantity,    this line ->  \"items[index].attributes.quantity\" is path where we need to increament the quantity\n    } else {\n      product.attributes.quantity = quantity; //if no, initialize the quantity for the product\n      items = [...items, product]; //we have cancatenate the newly added product with array them reinitialize or updated the array using cancatenate with the  help of spread operator\n    }\n    setCartItems(items); //updated the 'cartItems' state\n  };\n  const handleRemoveFromCart = product => {\n    let items = [...cartItems];\n    items.filter(p => p.id !== product.id); //except the selected product for the removal, filter out all the products and then update the state\n    setCartItems(items);\n  };\n\n  // Make the user available to all descendant components.\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      categories,\n      setCategories,\n      products,\n      setProducts,\n      cartItems,\n      setCartItems,\n      handleAddToCart,\n      cartCount,\n      handleRemoveFromCart,\n      showCart,\n      setShowCart,\n      handleCartProductQuantity,\n      cartSubTotal\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 12\n  }, this);\n};\n_s(AppContext, \"T9+lu1KJQkEI5T/xg7cJiLsoXzw=\", false, function () {\n  return [useLocation];\n});\n_c = AppContext;\nexport default AppContext;\n\n/* \n React Context is a method to pass props from parent to child component(s),\n by storing the props in a store(similar in Redux) and using these props from the \n store by child component(s) without actually passing them manually at each level of\n the component tree.\n\n1. React Context is a feature that allows you to easily share data between components \n   without having to pass props down manually. This is useful for data that needs to be\n   accessed by multiple components, such as the current user or the current theme.\n\n2. To use Context, you first need to create a Context object. This object will store the \n   data that you want to share. Once you have created the Context object, you can create a\n   Provider component. This component will make the data available to all of its descendant \n   components. \n   \n3. Finally, you can use the useContext hook to access the data in any component.\n   The useContext hook will return the value of the Context object for the current component.\n\n4. Basically we can refer AppContext is a higher higher order component in which we will\n   wrap all the components. Now, all the states we will create in AppContext we can use \n   them in all the childrens(all the components it contained).\n\n5. the states we need at multiple places, we create here like cart logic (update,delete,..etc) and so many states\n\n6. in this file now we will maintain states for the categories and for the products\n*/\n\n/*\nShallow Copy\n\nThe shallowCopy array will now contain the same elements as the arr array, but\nthey will be stored in different memory locations. This means that changes to \nthe arr array will not be reflected in the shallowCopy array.\nThe spread operator can also be used to create a shallow copy of nested arrays.\n For example:\nconst arr = [1, 2, 3];\nconst shallowCopy = [...arr];\n\nThe spread operator (...) is a JavaScript operator\n\n*/\nvar _c;\n$RefreshReg$(_c, \"AppContext\");","map":{"version":3,"names":["createContext","useState","useLocation","jsxDEV","_jsxDEV","Context","AppContext","children","_s","categories","setCategories","products","setProducts","showCart","setShowCart","cartItems","setCartItems","cartCount","setCartCount","cartSubTotal","setCartSubTotal","location","handleAddToCart","product","quantity","_items","items","index","findIndex","p","id","attributes","handleRemoveFromCart","filter","Provider","value","handleCartProductQuantity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nishchayanarula/Desktop/simple-one/client/src/utils/context.js"],"sourcesContent":["import { createContext,useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\n// Create a Context object.\nexport const Context = createContext();\n\n\n// Create a Provider component.\nconst AppContext = ({children}) => {\n   \n   const [categories, setCategories] = useState();\n   const [products, setProducts] = useState();\n   const [showCart, setShowCart] = useState(false);\n   const [cartItems, setCartItems] = useState([]);          //cartItems is an array contain all the products\n   const [cartCount, setCartCount] = useState(0);\n   const [cartSubTotal, setCartSubTotal] = useState(0);\n   const location = useLocation();\n\n   //we will pass all the states which we want them to be available globally for the all components\n   //we will write them in values     \n   \n\n   const handleAddToCart = (product, quantity) => {\n      let items = [...cartItems];            //shallow copy of cartItems\n      let index = items?.findIndex((p) => p.id === product?.id); //find if the current selected item index is in the items or in the cartItems or not\n      if (index !== -1) {\n          items[index].attributes.quantity += quantity;           //if yes, item already present, increase its quantity,    this line ->  \"items[index].attributes.quantity\" is path where we need to increament the quantity\n      } else {\n          product.attributes.quantity = quantity;                 //if no, initialize the quantity for the product\n          items = [...items, product];   //we have cancatenate the newly added product with array them reinitialize or updated the array using cancatenate with the  help of spread operator\n      }\n      setCartItems(items);   //updated the 'cartItems' state\n  };\n\n  const handleRemoveFromCart = (product) => {\n    let items = [...cartItems];\n    items.filter((p) => p.id !== product.id);  //except the selected product for the removal, filter out all the products and then update the state\n    setCartItems(items); \n  }\n\n\n\n\n// Make the user available to all descendant components.\n    return <Context.Provider \n               value={{\n               categories,\n               setCategories,\n               products,\n               setProducts,\n               cartItems,\n               setCartItems,\n               handleAddToCart,\n               cartCount,\n               handleRemoveFromCart,\n               showCart,\n               setShowCart,\n               handleCartProductQuantity,\n               cartSubTotal,\n               }}>\n\n                {children}\n           </Context.Provider>\n};\n\nexport default AppContext;\n\n\n/* \n React Context is a method to pass props from parent to child component(s),\n by storing the props in a store(similar in Redux) and using these props from the \n store by child component(s) without actually passing them manually at each level of\n the component tree.\n\n1. React Context is a feature that allows you to easily share data between components \n   without having to pass props down manually. This is useful for data that needs to be\n   accessed by multiple components, such as the current user or the current theme.\n\n2. To use Context, you first need to create a Context object. This object will store the \n   data that you want to share. Once you have created the Context object, you can create a\n   Provider component. This component will make the data available to all of its descendant \n   components. \n   \n3. Finally, you can use the useContext hook to access the data in any component.\n   The useContext hook will return the value of the Context object for the current component.\n\n4. Basically we can refer AppContext is a higher higher order component in which we will\n   wrap all the components. Now, all the states we will create in AppContext we can use \n   them in all the childrens(all the components it contained).\n\n5. the states we need at multiple places, we create here like cart logic (update,delete,..etc) and so many states\n\n6. in this file now we will maintain states for the categories and for the products\n*/\n\n\n/*\nShallow Copy\n\nThe shallowCopy array will now contain the same elements as the arr array, but\nthey will be stored in different memory locations. This means that changes to \nthe arr array will not be reflected in the shallowCopy array.\nThe spread operator can also be used to create a shallow copy of nested arrays.\n For example:\nconst arr = [1, 2, 3];\nconst shallowCopy = [...arr];\n\nThe spread operator (...) is a JavaScript operator\n\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}