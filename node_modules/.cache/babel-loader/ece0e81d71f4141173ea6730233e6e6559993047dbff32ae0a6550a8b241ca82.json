{"ast":null,"code":"var _jsxFileName = \"/Users/nishchayanarula/Desktop/simple-one/client/src/utils/context.js\";\nimport { createContext } from \"react\";\n\n// Create a Context object.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\n\n// Create a Provider component.\nconst AppContext = ({\n  children\n}) => {\n  // Make the user available to all descendant components.\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 12\n  }, this);\n};\n_c = AppContext;\nexport default AppContext;\n\n/* \n React Context is a method to pass props from parent to child component(s),\n by storing the props in a store(similar in Redux) and using these props from the \n store by child component(s) without actually passing them manually at each level of\n the component tree.\n\n1. React Context is a feature that allows you to easily share data between components \n   without having to pass props down manually. This is useful for data that needs to be\n   accessed by multiple components, such as the current user or the current theme.\n\n2. To use Context, you first need to create a Context object. This object will store the \n   data that you want to share. Once you have created the Context object, you can create a\n   Provider component. This component will make the data available to all of its descendant \n   components. \n   \n3. Finally, you can use the useContext hook to access the data in any component.\n   The useContext hook will return the value of the Context object for the current component.\n\n4. Basically we can refer AppContext is a higher higher order component in which we will\n   wrap all the components. Now, all the states we will create in AppContext we can use \n   them in all the childrens(all the components it contained).\n\n5. the states we need at multiple places, we create here like cart logic (update,delete,..etc) and so many states\n*/\nvar _c;\n$RefreshReg$(_c, \"AppContext\");","map":{"version":3,"names":["createContext","jsxDEV","_jsxDEV","Context","AppContext","children","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/nishchayanarula/Desktop/simple-one/client/src/utils/context.js"],"sourcesContent":["import { createContext } from \"react\";\n\n// Create a Context object.\nexport const Context = createContext();\n\n\n// Create a Provider component.\nconst AppContext = ({children}) => {\n\n// Make the user available to all descendant components.\n    return <Context.Provider>\n                {children}\n           </Context.Provider>\n};\n\nexport default AppContext;\n\n\n/* \n React Context is a method to pass props from parent to child component(s),\n by storing the props in a store(similar in Redux) and using these props from the \n store by child component(s) without actually passing them manually at each level of\n the component tree.\n\n1. React Context is a feature that allows you to easily share data between components \n   without having to pass props down manually. This is useful for data that needs to be\n   accessed by multiple components, such as the current user or the current theme.\n\n2. To use Context, you first need to create a Context object. This object will store the \n   data that you want to share. Once you have created the Context object, you can create a\n   Provider component. This component will make the data available to all of its descendant \n   components. \n   \n3. Finally, you can use the useContext hook to access the data in any component.\n   The useContext hook will return the value of the Context object for the current component.\n\n4. Basically we can refer AppContext is a higher higher order component in which we will\n   wrap all the components. Now, all the states we will create in AppContext we can use \n   them in all the childrens(all the components it contained).\n\n5. the states we need at multiple places, we create here like cart logic (update,delete,..etc) and so many states\n*/\n\n\n\n"],"mappings":";AAAA,SAASA,aAAa,QAAQ,OAAO;;AAErC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,OAAO,gBAAGH,aAAa,CAAC,CAAC;;AAGtC;AACA,MAAMI,UAAU,GAAGA,CAAC;EAACC;AAAQ,CAAC,KAAK;EAEnC;EACI,oBAAOH,OAAA,CAACC,OAAO,CAACG,QAAQ;IAAAD,QAAA,EACXA;EAAQ;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACI,CAAC;AAC9B,CAAC;AAACC,EAAA,GANIP,UAAU;AAQhB,eAAeA,UAAU;;AAGzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}